### Leen Madani July 23, 2023
### THe version of R used is 4.0.3



setwd("C:/Users/leenm/Documents/LeenMadani")

# install.packages("tidyverse")
# install.packages("funModeling") does not work because it is no longer found in R
# therefore, download it remotely from github itself using this code below:
devtools::install_github("pablo14/funModeling")
# make sure you download the devtools package before downloading funModeling remotely
# install.packages("Hmisc")


library(funModeling)
library(tidyverse)
library(Hmisc)


data <- read.csv("Diet_R.csv")

# the following basic_eda function is adapted from datascienceheroes.com
basic_eda <- function(data)
{
  glimpse(data)
  print(status(data))
  print(profiling_num(data))     # profiling_num() runs for all numerical/integer variables.
  plot_num(data, path_out = ".") # to export plot as jpeg to current directory, add path_out = "."
  describe(data)
}


# glimpse() function shows the no. of rows & columns, each column with it values, and the data type.
# status() function returns a table with overall metrics about data types, zeros, infinite no., and NAs..
# profiling_num() is used to analyze our quantitative data, showing all the descriptive statistics(i.e.mean,
# ..., std dev, variance, percentiles, skewness of the distribution, kurotsis, IQR, range_98, and range_80.
# ... range_98 is the range where 98% of the values are, range_80 is range where 80% of values are.
# the plot_num() function creates a plot showing the distribution of each variable.
# ... the default value of the bins is set to 10.
# describe() function analyzes numerical and categorical at the same time; in this case, diet and gender are categorical
# .. and all other variables are numerical. We can detect outliers by analyzing the lowest and highest values of numerical variables
# .. and we can see the count/frequency of the categorical variables clearly.

basic_eda(data) # run the basic_eda function with all the arguments in it for our dataset, Diet_R


summary(data) # summary() function gives a a brief summary statistics of the variables, which is specifically used
# ..in this case to check exact value of max and minumum values which were not computed in basic_eda funciton.


# Dealing with missing values in the gender column
# I will impute the gender in this dataset for the missing values based on a scientific hypothesis
# On average, females tend to be shorter (lower height) and have a lower weight than males.
# Therefore, I will calculate the average height and pre.weight in females vs males in the dataset and try to guess to gender based on the result
# install.packages("dplyr")
# install.packages("tidyr")
library("dplyr")
library('tidyr')

female_avg <- data %>%
  filter(gender == 0) %>%                # females are represented as 0
  summarise(
    female_avg_height = mean(Height),
    female_avg_weight = mean(pre.weight)
  )

male_avg <- data %>%
  filter(gender == 1) %>%               # males are represented as 1
  summarise(
    male_avg_height = mean(Height),
    male_avg_weight = mean(pre.weight)
  )


# To view the missing values observations in order to compare them to the obtained avg height and weight, use indexing and
# ...store them in new variable called missing_values
missing_values <- data[is.na(data$gender),]

# To save the missing values table as an excel file to copy observations as a table into word, use write.csv()
write.csv(missing_values, file = "missing_values.csv")

# Now, create a function to impute gender based on difference in height and weight
# This step can be made manually by eye since we have only two observations with missing values
# However, this would make the code more reproducible in case we have more observations with missing gender values
impute_gender <- function(height, weight){
  female_difference <- abs(data$Height - female_avg$female_avg_height) + abs(data$pre.weight - female_avg$female_avg_weight)
  male_difference <- abs(data$Height - male_avg$male_avg_height) + abs(data$pre.weight - male_avg$male_avg_weight)

  ifelse (female_difference <= male_difference, 0, 1)
}

# Impute the missing values based on the hypothesis i made using mutate() from dplyr
data1 <- data %>%
  mutate(gender = case_when(
    is.na(gender) ~ impute_gender(Height, pre.weight),  # very important to add the is.na for gender as impute_gender should only run for observation with NA gender values
    .default = gender ))

# Now view the missing_values dataframe again and compare observations with data1 to verify imputed gender values
missing_value

# Add a new column representing the weight difference in participants, which will be the dependent variable.
data2 <- data1 %>%
  mutate(weight_change = weight6weeks - pre.weight) #mutate() will add another column called weight_change

# For the correlation plot, I would like to study the influence of pre weight, age, type of diet, gender on the loss/gain of weight, signified by weight_change
# Therefore, I will only keep these variables (columns)
data3 <- select(data2, pre.weight, gender, Age, Diet, weight_change)

# Install and load the corrplot package to create a correlation matrix for the dataset
# install.packages("corrplot")
library(corrplot)

# Create a correlation matrix for the dataset with the specified variables
corr_matrix <- cor(data3)

# Create a correlation plot, using the "color" method to represent strength and direction of correlations between variables
corrplot(corr_matrix, method = "color")

# For better visualization plots of gender impact (a categorical varibale) on weight_change, I will impute them as factors and
# ...change 0s to represent female and 1 to represent males
# ...I will repeat the same thing for type of diet because its categorical and can include it in the facet_wrap() function when
# ... when using ggplot2 for better visualization
data4 <- data3 %>%
  mutate(gender = factor(gender, levels = c(0, 1), labels = c("Female", "Male")),
         Diet = factor(Diet, levels = c(1,2,3), labels = c("Type 1", "Type 2", "Type 3")))

# Create plot using ggplot2 package to visualize the relationship between the independent variables pre.weight, age, gender, and diet type and dependent variable weight change
library(ggplot2)
# base layer for plots
plot_preweight <- ggplot(data4, aes(x = pre.weight, y = weight_change )) +
  geom_point() +
  labs(x = "Weight Before Diet", y = " Weight Change")
plot_gender <- ggplot(data4, aes(x = gender, y = weight_change )) +
  geom_point() +
  labs(x = "Gender", y = " Weight Change")
plot_age <- ggplot(data4, aes(x = Age, y = weight_change )) +
  geom_point() +
  labs(x = "Age", y = " Weight Change")
plot_diet <- ggplot(data4, aes(x = Diet, y = weight_change )) +
  geom_point() +
  labs(x = "Diet", y = " Weight Change")

# To combine all the plots, install gridExtra package and use the the grid.arrange() function
# install.packages("gridExtra")
library(gridExtra)
combine_base_plots <- grid.arrange(plot_preweight, plot_gender, plot_age, plot_diet, nrow = 2)
# This would give me the same result that I got in the EDA, so it will not be included in report.


# Create scatterplot and store it as plot 1
plot1 <- ggplot(data4, aes(x = Diet, y = weight_change)) +
  geom_point(size = 3, aes(col = weight_change > 0)) +
  scale_color_manual(values = c("blue", "red"), guide = FALSE) + # guide = FALSE will remove automated color legend as i want to include my own labels
  facet_wrap(~gender, nrow = 2) + # # takes the data and breaks it up into categorical variable gender
  theme_light() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = 1) +
  geom_text(x = Inf, y = 1, label = "Weight Gain", hjust = 1, color = "red", size = 3.5) +   # all these parameters adjust the format of the label
  geom_text(x = Inf, y = -1, label = "Weight Loss", hjust = 1, color = "blue", size = 3.5)+  # for example, y = -1 places label at y = -1, size is 3.5, and hjust is horizontal justification
  labs(x = "Type of Diet", y = "Weight Change (kg)") #  i added the axes labels again to make them consistent appearance-wise
plot1

# Experiment plot 2
plot2 <- ggplot(data4, aes(x = Age, y = weight_change)) +
  geom_point(aes(col= gender)) +
  geom_smooth(method = "lm") +
  facet_wrap(~Diet, nrow = 3) + # # takes the data and breaks it up into categorical variable gender
  theme_light() +
  labs(x = "Age (in years)", y = "Weight Change (kg)") #  i added the axes labels again to make them consistent appearance-wise

plot2

# Experiment plot 3
plot3 <- ggplot(data4, aes(x = pre.weight, y = weight_change, color= gender )) +
  geom_boxplot(outlier.colour="pink", outlier.shape=16, outlier.size=2) +
  scale_color_ordinal() +
  facet_wrap(~Diet, ncol = 3) + # takes the data and breaks it up into categorical variable gender
  labs(x = "Weight Before Diet (kg)", y = "Weight Change (kg)") +
  ggtitle( "Weight Before Diet vs Weight Change by Diet Type")
plot3

# Experiment plot 4
library(plyr)
mu <- ddply(data4, "gender", summarise, grp.mean=mean(pre.weight))
head(mu)

plot4<-ggplot(data4, aes(x=pre.weight, color=gender)) +
  geom_histogram(fill="white", position="identity", alpha=0.5)+ # identity overlays histograms directly on top of each other, rathr than stacked and alpha = 0.5 adds transparancy to the bars
  geom_vline(data=mu, aes(xintercept=grp.mean, color=gender),   # adds the mean of pre.weight as dashed line for each gender
             linetype="dashed") +
  labs(x = "Weight Before Diet (kg)", y = "Count")                   # names the axes so that they are consistent in format

plot4


# Experiment plot5
plot5 <- ggplot(data4, aes(x=weight_change, color=gender)) +
  geom_histogram(fill="white") +
  labs(x = "Change in Weight", y = "Count")
plot5

#Experiment plot 6

plot6 <- ggplot(data4, aes(x = weight_change, color = gender)) +
  geom_density() +
  labs(x = "Weight Change", y = "Density")

plot6
